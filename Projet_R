# ui.R
library(shiny)
library(DT)
library(leaflet)
library(ggplot2)
library(dplyr)
library(sf)
library(readxl)
library(plotly)
# Interface utilisateur avec des onglets
ui <- fluidPage(
  
  titlePanel("Sportifs de Haut niveau en 2015"),
  
  tabsetPanel(
    tabPanel("Recherche", 
             mainPanel(
               textOutput("summary"), 
               DTOutput("contents")    
             )
    ),
    
    tabPanel("Cartes",
             # Utilisation de sidebarLayout pour une colonne de sélection à gauche
             sidebarLayout(
               sidebarPanel(
                 h4("Options de sélection"),
                 selectInput("variable", "Choisissez un paramètre :", 
                             choices = c("Fédération" = "Federation", 
                                         "Catégorie" = "Categorie")),
                 
                 # Affichage dynamique des valeurs de la variable sélectionnée
                 uiOutput("value_selector")
               ),
               mainPanel(
                 tabsetPanel(
                   tabPanel("Proportion",
                            leafletOutput("carte_interactive")
                   ),
                   tabPanel("Chiffres",
                            leafletOutput("france_map_chiffres", height = 500)
                   )
                 )
               )
             )
    ),
    
    tabPanel("Statistiques", 
             mainPanel(
               tabsetPanel(
                 
                 # Onglet pour l'évolution temporelle des athlètes
                 tabPanel("Evolution temporelle",
                          sidebarLayout(
                            # Panneau latéral pour les filtres dans l'onglet "Evolution temporelle"
                            sidebarPanel(
                              selectInput("view_type", "Choisissez une vue :", 
                                          choices = c("Global" = "global", 
                                                      "Par Région" = "Region", 
                                                      "Par Département" = "Departement")),
                              uiOutput("filter_selector")  # Sélection dynamique de la région ou du département
                            ),
                            
                            # Panneau principal pour le graphique de l'onglet "Evolution temporelle"
                            mainPanel(
                              plotlyOutput("evolution_plot", width = "500px")
                            )
                          )
                 ),
                 
                 # Onglet pour la répartition des athlètes par catégorie, région, ou département
                 tabPanel("Répartition",
                          sidebarLayout(
                            # Panneau latéral pour les filtres dans l'onglet "Répartition"
                            sidebarPanel(
                              selectInput("repartition_filter", "Choisissez un filtre :", 
                                          choices = c("Catégorie" = "Categorie", 
                                                      "Région" = "Region", 
                                                      "Département" = "Departement"),
                                          selected = "Categorie"),width = 4
                            ),
                            
                            # Panneau principal pour le graphique de répartition
                            mainPanel(
                              plotlyOutput("repartition_plot",width="400px")
                            )
                          )
                 )
               )
             )
    )
    )
    )

# server.R
library(shiny)
library(openxlsx)
library(readxl)
library(DT)
library(leaflet)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(sf)
library(plotly)

server <- function(input, output,session) {
  
  data<-read_excel("donnees/SHN_2015_2024_complet.xlsx")

  output$contents <- renderDT({
    datatable(data, options = list(pageLength = 10),filter = "top" )
  })
  
  
  data_filtered <- reactive({
    data %>%
      filter(Annee >= 2014 & Annee <= 2024)  # Filtrer les années de 2014 à 2024
  })
  
  # Dynamiser la sélection en fonction du type de vue choisi (Région ou Département)
  output$filter_selector <- renderUI({
    if (input$view_type == "Region") {
      selectInput("region_choice", "Choisissez une région :", 
                  choices = unique(data$Region), 
                  selected = unique(data$Region)[1])
    } else if (input$view_type == "Departement") {
      selectInput("departement_choice", "Choisissez un département :", 
                  choices = unique(data$Departement), 
                  selected = unique(data$Departement)[1])
    }
  })
  
  # Générer le graphique en fonction des filtres
  output$evolution_plot <- renderPlotly({
    # Filtrage selon la vue choisie
    if (input$view_type == "global") {
      data_filtered() %>%
        count(Annee) %>%
        ggplot(aes(x = Annee, y = n)) +
        geom_line(color = "blue", size = 1) +
        geom_point(color = "red", size = 2) +
        scale_x_continuous(breaks = seq(2014, 2024, 1)) +  # Afficher toutes les années de 2014 à 2024
        labs(title = "Évolution du nombre d'athlètes par année (Global)",
             x = "Année", y = "Nombre d'athlètes")
      
    } else if (input$view_type == "Region") {
      data_filtered() %>%
        filter(Region == input$region_choice) %>%
        count(Annee) %>%
        ggplot(aes(x = Annee, y = n, group = 1)) +
        geom_line(color = "blue", size = 1) +
        geom_point(color = "red", size = 2) +
        scale_x_continuous(breaks = seq(2014, 2024, 1)) +  # Afficher toutes les années de 2014 à 2024
        labs(title = paste("Évolution du nombre d'athlètes par année - Région :", input$region_choice),
             x = "Année", y = "Nombre d'athlètes")
      
    } else if (input$view_type == "Departement") {
      data_filtered() %>%
        filter(Departement == input$departement_choice) %>%
        count(Annee) %>%
        ggplot(aes(x = Annee, y = n, group = 1)) +
        geom_line(color = "blue", size = 1) +
        geom_point(color = "red", size = 2) +
        scale_x_continuous(breaks = seq(2014, 2024, 1)) +  # Afficher toutes les années de 2014 à 2024
        labs(title = paste("Évolution du nombre d'athlètes par année - Département :", input$departement_choice),
             x = "Année", y = "Nombre d'athlètes")
    }
  })
  
  
  #deuxième graphique
  
  # Données réactives en fonction du filtre sélectionné
  repartition_data <- reactive({
    req(input$repartition_filter)
    
    # Regrouper les données en fonction du filtre sélectionné
    data %>%
      group_by_at(input$repartition_filter) %>%
      summarise(n_athletes = n()) %>%
      arrange(desc(n_athletes))
  })
  
  # Graphique de répartition
  output$repartition_plot <- renderPlotly({
    # Créer le graphique avec ggplot
    p <- ggplot(repartition_data(), aes_string(x = input$repartition_filter, y = "n_athletes")) +
      geom_bar(stat = "identity", fill = "skyblue") +
      labs(
        x = input$repartition_filter,
        y = "Nombre d'athlètes",
        title = paste("Répartition des athlètes par", input$repartition_filter)
      ) +
      theme_minimal() +
      theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotation des étiquettes pour lisibilité
    
    # Rendre le graphique interactif avec ggplotly
    ggplotly(p)
    })
  
  
  #Carte
  
  departements <- st_read("donnees/coordonnees_departements.geojson")
  
   departements <- departements %>%
    mutate(nom = toupper(nom))
   data <- data %>%
     mutate(Departement = toupper(Departement))
  # Carte interactive avec choix de paramètres
  output$value_selector <- renderUI({
    selectInput("value", 
                label = paste("Choisissez une valeur pour", input$variable),
                choices = unique(data[[input$variable]]), 
                selected = unique(data[[input$variable]])[1])
  })
  
  # Filtrer les données d'athlètes en fonction des sélections utilisateur
  filtered_data <- reactive({
    req(input$value)
    data %>%
      filter(get(input$variable) == input$value) %>%
      count(Departement) %>%
      rename(n_athletes = n)
  })
  
  # Joindre les données géographiques avec les données d'athlètes filtrées
  departements_data <- reactive({
    departements %>%
      left_join(filtered_data(), by = c("nom" = "Departement")) %>%
      mutate(n_athletes = ifelse(is.na(n_athletes), 0, n_athletes))
  })
  
  # Affichage de la carte interactive
  output$carte_interactive <- renderLeaflet({
    leaflet(data = departements) %>%
      addProviderTiles(providers$CartoDB.Positron)
  })
  
  # Mise à jour des polygones de la carte en fonction des filtres
  observe({
    leafletProxy("carte_interactive", data = departements_data()) %>%
      clearShapes() %>%
      addPolygons(
        fillColor = ~colorNumeric("Blues", n_athletes)(n_athletes),
        color = "white",
        weight = 1,
        opacity = 1,
        fillOpacity = 0.7,
        label = ~paste0(nom, ": ", n_athletes, " athlètes"),
        highlightOptions = highlightOptions(weight = 3, color = "black", bringToFront = TRUE)
      ) %>%
      addLegend(
        pal = colorNumeric("Blues", departements_data()$n_athletes),
        values = ~n_athletes,
        title = "Nombre d'athlètes",
        position = "bottomright"
      )
  })
    
}
